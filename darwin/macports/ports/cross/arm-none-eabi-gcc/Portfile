# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$
PortSystem              1.0
set targetarch          arm-none-eabi
name                    ${targetarch}-gcc-linaro
version                 4.6.2-2011.11.23.01
set gccversion          4.6.2

set branch              [join [lrange [split ${gccversion} .] 0 1] .]
set newlibversion       1.19.0
categories              cross devel
platforms               darwin
maintainers             nomaintainer
description             gcc cross-compilers for ${targetarch}, with newlib runtime library.
long_description        gnu compilers collection (including c and c++) for ${targetarch}, with newlib runtime library.
homepage                http://gcc.gnu.org/
master_sites            http://ftp.gnu.org/gnu/gcc/gcc-4.6.2/:gcc \
                        http://download.paparazziuav.org/linux/source/newlib/:newlib \
                        ftp://ftp.mirror.ac.uk/sites/sources.redhat.com/pub/newlib/:newlib \
                        http://www.mirrorservice.org/sites/sourceware.org/pub/newlib/:newlib \
                        http://bernard.gondwana.com.au/files/:newlib \
                        ftp://sources.redhat.com/pub/newlib/:newlib

distfiles               gcc-${gccversion}.tar.gz:gcc \
                        newlib-${newlibversion}.tar.gz:newlib
#use_bzip2               yes
checksums               gcc-4.6.2.tar.gz \
                        md5     56c5b2a0ca0d4f27a827548ce5cf4203 \
                        sha1    6b039f3ca843ac414aff2e125eeaa9d6097b2d08 \
                        rmd160  a9f43670d0c2bf68cd5345aaa7fe385c143927f8 \
                        newlib-1.19.0.tar.gz \
                        md5     0966e19f03217db9e9076894b47e6601 \
                        sha1    b2269d30ce7b93b7c714b90ef2f40221c2df0fcd \
                        rmd160  a28bd656ec895da0738dac3fb367851a2992d724
# All cross ports violate the mtree layout.
destroot.violate_mtree  yes
depends_lib-append      \
                        port:gmp \
                        port:mpfr \
                        port:mpc \
                        port:libmpc\
                        port:gettext \
                        port:libiconv \
                        port:${targetarch}-binutils
# gmp and mpfr are not universal
universal_variant	no
worksrcdir              build
extract.only            gcc-${gccversion}.tar.gz
# Extract newlib and create a symlink of newlib/newlib in gcc directory.
post-extract    {
        system "cd ${workpath} && gzip -dc ${distpath}/newlib-${newlibversion}.tar.gz | tar -xf -"
        system "ln -s ${workpath}/newlib-${newlibversion}/newlib ${workpath}/gcc-${gccversion}/"
        system "ln -s ${workpath}/newlib-${newlibversion}/libgloss ${workpath}/gcc-${gccversion}/"
}

patch.dir              ${workpath}/gcc-${gccversion}
patchfiles              \
                        patch-gcc-config-arm-t-arm-elf.diff

# Since we don't build gcc and binutils at the same time, gcc's Makefile will try to transform
# program names as gcc's name (add -${gccversion} with ${gccversion} being the version of gcc).
# But it won't work because binutils binaries don't have the ${gccversion} suffix, and even if they
# had, they would actually have the binutils' version suffix (and not gcc's version).
# So let's tell gcc's Makefile not to do that mistake.

set environment         [list AR_FOR_TARGET=${targetarch}-ar \
                        AS_FOR_TARGET=${targetarch}-as \
                        LD_FOR_TARGET=${targetarch}-ld \
                        NM_FOR_TARGET=${targetarch}-nm \
                        RANLIB_FOR_TARGET=${targetarch}-ranlib ]

pre-configure {
    file mkdir ${worksrcpath}
}
configure.env           ${environment}
configure.cmd           ../gcc-${gccversion}/configure
configure.optflags-delete   -O2
configure.pipe
configure.compiler      clang
configure.cppflags
configure.ldflags
configure.cc-append     -I${prefix}/include
configure.args          --target=${targetarch} \
                        --program-prefix=${targetarch}- \
                        --enable-interwork \
                        --enable-multilib \
                        --enable-languages="c" \
                        --with-newlib \
                        --with-gnu-as \
                        --with-gnu-ld \
                        --disable-nls \
                        --disable-shared \
                        --disable-threads \
                        --with-headers=${workpath}/newlib-${newlibversion}/newlib/libc/include \
                        --disable-libssp \
                        --disable-libstdcxx-pch \
                        --disable-libmudflap \
                        --disable-libgomp \
                        --disable-werror \
                        --with-system-zlib \
                        --with-gmp=${prefix} \
                        --with-mpfr=${prefix} \
                        --with-mpc=${prefix} \
                        --with-libiconv-prefix=${prefix} \
                        --disable-newlib-supplied-syscalls

if {${os.platform} == "darwin" && ($build_arch == "x86_64" || $build_arch == "ppc64")} {
	    configure.args-append --build=${build_arch}-apple-darwin${os.version} \
	                          --host=${build_arch}-apple-darwin${os.version}
}
                        
configure.cc_archflags
configure.cxx_archflags
configure.objc_archflags
if {[info exists configure.ld_archflags]} {
    configure.ld_archflags
}

build.args              ${environment}
build.jobs              1
destroot.args           ${environment}

post-patch {
        namespace eval crossgcc {}

        # Fix the info pages and related stuff.
        #
        # path: path to the doc directory (e.g. gas/doc/)
        # makefile: path to Makefile.in (e.g. gas/doc/Makefile.in)
        # name: name of the info page (e.g. as)
        # suffix: suffix of the souce page (texinfo or texi)
        proc crossgcc::fixinfo { path makefile name suffix } {
                global targetarch worksrcpath

                # Fix the source
                reinplace "s|setfilename ${name}.info|setfilename ${targetarch}-${name}.info|g" \
                        ${worksrcpath}/${path}/${name}.${suffix}
                reinplace "s|(${name})|(${targetarch}-${name})|g" \
                        ${worksrcpath}/${path}/${name}.${suffix}
                reinplace "s|@file{${name}}|@file{${targetarch}-${name}}|g" \
                        ${worksrcpath}/${path}/${name}.${suffix}

                # Fix the Makefile
                reinplace "s| ${name}.info| ${targetarch}-${name}.info|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|/${name}.info|/${targetarch}-${name}.info|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|^${name}.info|${targetarch}-${name}.info|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s| ${name}.pod| ${targetarch}-${name}.pod|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|/${name}.pod|/${targetarch}-${name}.pod|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|^${name}.pod|${targetarch}-${name}.pod|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s| ${name}.${suffix}| ${targetarch}-${name}.${suffix}|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|/${name}.${suffix}|/${targetarch}-${name}.${suffix}|g" \
                        ${worksrcpath}/${makefile}
                reinplace "s|^${name}.${suffix}|${targetarch}-${name}.${suffix}|g" \
                        ${worksrcpath}/${makefile}

                # Rename the source
                file rename ${worksrcpath}/${path}/${name}.${suffix} \
                        ${worksrcpath}/${path}/${targetarch}-${name}.${suffix}

                # Fix install-info's dir.
                # (note: this may be effectless if there was no info dir to be fixed)
                reinplace "s|--info-dir=\$(DESTDIR)\$(infodir)|--dir-file=\$(DESTDIR)\$(infodir)/${targetarch}-gcc-dir|g" \
                        "${worksrcpath}/${makefile}"
        }

        # Fix the gettext files and related stuff.
        #
        # module: name of the module (e.g. gas)
        proc crossgcc::fixgettext { module } {
                global targetarch worksrcpath

                if { [ file exists "${worksrcpath}/${module}/Makefile.in" ] } {
                        reinplace "s|@PACKAGE@|${targetarch}-@PACKAGE@|g" \
                                "${worksrcpath}/${module}/Makefile.in"
                        reinplace "s|${module}\.mo|${targetarch}-${module}.mo|g" \
                                "${worksrcpath}/${module}/Makefile.in"
                }
                if { [ file exists "${worksrcpath}/${module}/doc/Makefile.in" ] } {
                        reinplace "s|@PACKAGE@|${targetarch}-@PACKAGE@|g" \
                                "${worksrcpath}/${module}/doc/Makefile.in"
                }
        }

#        # gcc/doc/cpp.texi
#        crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cpp texi

#        # gcc/doc/cppinternals.texi
#        crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cppinternals texi

#        # gcc/doc/gcc.texi
#        crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gcc texi

#        # gcc/doc/gccint.texi
#        crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccint texi

#        # gcc/fortran/gfortran.texi
#        crossgcc::fixinfo gcc/fortran/ gcc/fortran/Make-lang.in gfortran texi

#        # gcc/java/gcj.texi
#        crossgcc::fixinfo gcc/java/ gcc/java/Make-lang.in gcj texi

#        # gcc/doc/gccinstall.info
#        crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccinstall info

#        # gettext stuff.
#        crossgcc::fixgettext gcc
#        crossgcc::fixgettext libcpp
}

pre-destroot {
        # gcc needs the cross directory structure to be present
        # in order to fill it during installation.
        file mkdir "${destroot}${prefix}/${targetarch}/bin"
        file mkdir "${destroot}${prefix}/${targetarch}/lib"
}

post-destroot {
        namespace eval crossgcc {}

        # Rename a man page if it exists.
        #
        # section: section of the man page (e.g. 1)
        # manpage: name of the man page (e.g. cpp)
        proc crossgcc::rename_man_page { section manpage } {
                global targetarch destroot prefix

                set manpage_path "${destroot}${prefix}/share/man/man${section}/${manpage}.${section}"
                if { [ file exists ${manpage_path} ] } {
                        file rename ${manpage_path} \
                                "${destroot}${prefix}/share/man/man${section}/${targetarch}-${manpage}.${section}"
                }
        }

        # Stuff I don't want (either because they're in the system
        # or because they would conflict with other FSF ports)
        # (it's easier for maintainability purposes to fix things here)

        # aliases for locales (should be on the system)
        file delete "${destroot}${prefix}/share/locale/locale.alias"

        # FSF propaganda (should already be there or would conflict)
        file delete -force "${destroot}${prefix}/share/man/man7"

        # (host) libiberty
        foreach f [glob -directory "${destroot}${prefix}/lib" libiberty.a */libiberty.a] {
        file delete $f
    }

    # aliases for charsets (should already be there)
    file delete "${destroot}${prefix}/lib/charset.alias"

        # Remove man pages for tools that are not built as part of cross-gcc
        file delete "${destroot}${prefix}/share/man/man1/rmic.1"
        file delete "${destroot}${prefix}/share/man/man1/rmiregistry.1"
        file delete "${destroot}${prefix}/share/man/man1/jv-convert.1"
        file delete "${destroot}${prefix}/share/man/man1/gij.1"

        # For some reason, some man pages are not prefixed while they should have been
        # (to avoid conflicting).
        crossgcc::rename_man_page 1 cpp
        crossgcc::rename_man_page 1 gcjh
        crossgcc::rename_man_page 1 gcov
        crossgcc::rename_man_page 1 jcf-dump
        crossgcc::rename_man_page 1 jv-scan

        # There is a bug in gcc/Makefile::install-driver
        # For cross compilers, $(GCC_INSTALL_NAME) is equal to
        # $(target_noncanonical)-gcc-$(gccversion)
        # and hence the driver isn't installed.
        xinstall -c "${workpath}/build/gcc/xgcc" \
            "${destroot}${prefix}/bin/${targetarch}-gcc-${gccversion}"
}

